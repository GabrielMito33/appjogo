#!/usr/bin/env python3
"""
üöÄ CONFIGURADOR INTERATIVO DO SUPABASE
Guia passo-a-passo para configurar o banco de dados
"""

import os
import json
import time
import webbrowser
from pathlib import Path
import asyncio
import aiohttp

class ConfiguradorSupabase:
    """Configurador interativo do Supabase"""
    
    def __init__(self):
        self.config = {}
        self.projeto_url = ""
        self.anon_key = ""
        self.service_key = ""
    
    def mostrar_banner(self):
        """Mostra banner inicial"""
        print("üöÄ CONFIGURADOR SUPABASE")
        print("=" * 30)
        print("üìã Este script vai te guiar na configura√ß√£o completa do Supabase")
        print("‚è±Ô∏è Tempo estimado: 5-10 minutos")
        print("üåê Ser√° necess√°rio acessar o site do Supabase")
        print()
    
    def passo_1_criar_conta(self):
        """Passo 1: Criar conta no Supabase"""
        print("üìù PASSO 1: CRIAR CONTA E PROJETO")
        print("=" * 35)
        print()
        print("1Ô∏è‚É£ Vamos abrir o site do Supabase...")
        
        # Abrir site automaticamente
        try:
            webbrowser.open("https://supabase.com")
            print("   ‚úÖ Site aberto no seu navegador")
        except:
            print("   ‚ö†Ô∏è Abra manualmente: https://supabase.com")
        
        print()
        print("2Ô∏è‚É£ No site do Supabase:")
        print("   ‚Ä¢ Clique em 'Start your project' ou 'Sign up'")
        print("   ‚Ä¢ Crie uma conta (pode usar GitHub/Google)")
        print("   ‚Ä¢ Confirme seu email se necess√°rio")
        print()
        
        input("üìå Pressione ENTER quando tiver criado sua conta...")
        
        print("\n3Ô∏è‚É£ Criar novo projeto:")
        print("   ‚Ä¢ Clique em 'New Project'")
        print("   ‚Ä¢ Escolha um nome (ex: 'sistema-bots')")
        print("   ‚Ä¢ Escolha uma senha forte para o banco")
        print("   ‚Ä¢ Selecione uma regi√£o pr√≥xima")
        print("   ‚Ä¢ Clique em 'Create new project'")
        print("   ‚Ä¢ ‚è≥ Aguarde 2-3 minutos para cria√ß√£o")
        print()
        
        input("üìå Pressione ENTER quando o projeto estiver criado...")
    
    def passo_2_obter_chaves(self):
        """Passo 2: Obter chaves da API"""
        print("\nüîë PASSO 2: OBTER CHAVES DA API")
        print("=" * 32)
        print()
        print("1Ô∏è‚É£ No painel do seu projeto:")
        print("   ‚Ä¢ Clique em 'Settings' (‚öôÔ∏è) na barra lateral")
        print("   ‚Ä¢ Clique em 'API' na se√ß√£o Settings")
        print()
        print("2Ô∏è‚É£ Voc√™ ver√° 3 informa√ß√µes importantes:")
        print("   üìç Project URL")
        print("   üîì anon public (chave p√∫blica)")
        print("   üîê service_role (chave privada)")
        print()
        
        # Coletar URL do projeto
        while True:
            self.projeto_url = input("üìç Cole aqui a Project URL: ").strip()
            if self.projeto_url.startswith("https://") and "supabase.co" in self.projeto_url:
                break
            print("   ‚ùå URL inv√°lida. Deve come√ßar com https:// e conter supabase.co")
        
        # Coletar chave p√∫blica
        while True:
            self.anon_key = input("üîì Cole aqui a chave anon public: ").strip()
            if len(self.anon_key) > 50:  # Valida√ß√£o b√°sica
                break
            print("   ‚ùå Chave muito curta. Verifique se copiou corretamente")
        
        # Coletar chave privada
        while True:
            self.service_key = input("üîê Cole aqui a chave service_role: ").strip()
            if len(self.service_key) > 50:  # Valida√ß√£o b√°sica
                break
            print("   ‚ùå Chave muito curta. Verifique se copiou corretamente")
        
        print("\n‚úÖ Chaves coletadas com sucesso!")
    
    def passo_3_testar_conexao(self):
        """Passo 3: Testar conex√£o"""
        print("\nüîç PASSO 3: TESTANDO CONEX√ÉO")
        print("=" * 28)
        print()
        
        async def testar():
            try:
                headers = {
                    'apikey': self.anon_key,
                    'Authorization': f'Bearer {self.anon_key}',
                    'Content-Type': 'application/json'
                }
                
                async with aiohttp.ClientSession() as session:
                    # Testar endpoint b√°sico
                    url = f"{self.projeto_url}/rest/v1/"
                    async with session.get(url, headers=headers, timeout=10) as response:
                        if response.status == 200:
                            print("   ‚úÖ Conex√£o estabelecida com sucesso!")
                            return True
                        else:
                            print(f"   ‚ùå Erro na conex√£o: Status {response.status}")
                            return False
            except Exception as e:
                print(f"   ‚ùå Erro na conex√£o: {e}")
                return False
        
        print("üîÑ Testando conex√£o...")
        sucesso = asyncio.run(testar())
        
        if not sucesso:
            print("\n‚ö†Ô∏è Problema na conex√£o:")
            print("   ‚Ä¢ Verifique se as chaves est√£o corretas")
            print("   ‚Ä¢ Verifique se o projeto foi criado completamente")
            print("   ‚Ä¢ Tente aguardar mais alguns minutos")
            
            if input("\nüîÑ Tentar novamente? (s/n): ").lower() == 's':
                return self.passo_3_testar_conexao()
            else:
                return False
        
        return True
    
    def passo_4_criar_env(self):
        """Passo 4: Criar arquivo .env"""
        print("\nüìù PASSO 4: CRIANDO ARQUIVO .ENV")
        print("=" * 32)
        print()
        
        env_content = f"""# ================================================
# üîß CONFIGURA√á√ÉO SUPABASE - GERADO AUTOMATICAMENTE
# ================================================
# Criado em: {time.strftime('%d/%m/%Y %H:%M:%S')}

# ===== SUPABASE CONFIGURA√á√ÉO =====
SUPABASE_URL={self.projeto_url}
SUPABASE_ANON_KEY={self.anon_key}
SUPABASE_SERVICE_KEY={self.service_key}

# ===== CONFIGURA√á√ÉO DO SISTEMA =====
ENVIRONMENT=production
LOG_LEVEL=INFO
DEBUG=false

# ===== SEGURAN√áA =====
JWT_SECRET=chave-secreta-jwt-{int(time.time())}
SESSION_SECRET=chave-sessao-secreta-{int(time.time())}

# ===== API CONFIGURA√á√ïES =====
API_TIMEOUT=30
MAX_RETRIES=3
RATE_LIMIT_PER_MINUTE=60
"""
        
        # Salvar arquivo .env
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        print("‚úÖ Arquivo .env criado com sucesso!")
        print(f"üìÅ Localiza√ß√£o: {Path('.env').absolute()}")
        print()
        print("üîê Configura√ß√µes salvas:")
        print(f"   üìç URL: {self.projeto_url}")
        print(f"   üîì Chave p√∫blica: {self.anon_key[:20]}...")
        print(f"   üîê Chave privada: {self.service_key[:20]}...")
    
    def passo_5_executar_sql(self):
        """Passo 5: Executar SQL no Supabase"""
        print("\nüóÑÔ∏è PASSO 5: EXECUTAR SQL NO SUPABASE")
        print("=" * 35)
        print()
        
        # Ler arquivo SQL
        sql_file = Path('database_supabase.sql')
        if not sql_file.exists():
            print("‚ùå Arquivo database_supabase.sql n√£o encontrado!")
            return False
        
        with open(sql_file, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        print("1Ô∏è‚É£ Vamos abrir o SQL Editor do Supabase...")
        
        # Construir URL do SQL Editor
        sql_editor_url = f"{self.projeto_url.replace('https://', 'https://supabase.com/dashboard/project/')}/sql"
        
        try:
            webbrowser.open(sql_editor_url)
            print("   ‚úÖ SQL Editor aberto no navegador")
        except:
            print(f"   ‚ö†Ô∏è Abra manualmente: {sql_editor_url}")
        
        print()
        print("2Ô∏è‚É£ No SQL Editor:")
        print("   ‚Ä¢ Clique em 'New query' se necess√°rio")
        print("   ‚Ä¢ Cole todo o conte√∫do do arquivo SQL")
        print("   ‚Ä¢ Clique em 'Run' ou pressione Ctrl+Enter")
        print("   ‚Ä¢ Aguarde a execu√ß√£o (pode demorar 30-60 segundos)")
        print()
        
        print("üìã CONTE√öDO DO SQL PARA COPIAR:")
        print("=" * 40)
        print("‚ö†Ô∏è COPIE TODO O TEXTO ABAIXO:")
        print()
        
        # Mostrar primeiras linhas do SQL para confirmar
        linhas = sql_content.split('\n')[:10]
        for linha in linhas:
            if linha.strip():
                print(f"   {linha}")
        
        print("   ... (resto do arquivo)")
        print()
        print(f"üìÅ Arquivo completo em: {sql_file.absolute()}")
        print()
        
        # Copiar para clipboard se poss√≠vel
        try:
            import pyperclip
            pyperclip.copy(sql_content)
            print("üìã SQL copiado para a √°rea de transfer√™ncia!")
        except ImportError:
            print("üí° Dica: Abra o arquivo database_supabase.sql para copiar")
        
        print()
        input("üìå Pressione ENTER quando tiver executado o SQL...")
        
        return True
    
    def passo_6_verificar_tabelas(self):
        """Passo 6: Verificar se as tabelas foram criadas"""
        print("\nüîç PASSO 6: VERIFICANDO TABELAS")
        print("=" * 30)
        print()
        
        async def verificar():
            try:
                headers = {
                    'apikey': self.service_key,
                    'Authorization': f'Bearer {self.service_key}',
                    'Content-Type': 'application/json'
                }
                
                # Testar algumas tabelas principais
                tabelas_teste = ['usuarios', 'robos', 'plataformas', 'estrategias']
                tabelas_ok = []
                
                async with aiohttp.ClientSession() as session:
                    for tabela in tabelas_teste:
                        try:
                            url = f"{self.projeto_url}/rest/v1/{tabela}?limit=1"
                            async with session.get(url, headers=headers, timeout=5) as response:
                                if response.status == 200:
                                    tabelas_ok.append(tabela)
                                    print(f"   ‚úÖ Tabela '{tabela}' criada")
                                else:
                                    print(f"   ‚ùå Tabela '{tabela}' n√£o encontrada")
                        except Exception as e:
                            print(f"   ‚ùå Erro ao verificar '{tabela}': {e}")
                
                return len(tabelas_ok) == len(tabelas_teste)
            
            except Exception as e:
                print(f"   ‚ùå Erro na verifica√ß√£o: {e}")
                return False
        
        print("üîÑ Verificando tabelas criadas...")
        sucesso = asyncio.run(verificar())
        
        if sucesso:
            print("\nüéâ TODAS AS TABELAS FORAM CRIADAS COM SUCESSO!")
        else:
            print("\n‚ö†Ô∏è Algumas tabelas n√£o foram encontradas:")
            print("   ‚Ä¢ Verifique se o SQL foi executado completamente")
            print("   ‚Ä¢ Veja se houve erros no SQL Editor")
            print("   ‚Ä¢ Tente executar o SQL novamente")
            
            if input("\nüîÑ Tentar verifica√ß√£o novamente? (s/n): ").lower() == 's':
                return self.passo_6_verificar_tabelas()
        
        return sucesso
    
    def passo_7_migrar_dados(self):
        """Passo 7: Migrar dados locais"""
        print("\nüöÄ PASSO 7: MIGRAR DADOS LOCAIS")
        print("=" * 30)
        print()
        
        # Verificar se h√° dados para migrar
        arquivos_dados = [
            'robos_configurados.json',
            'dados_plataformas.json'
        ]
        
        tem_dados = any(Path(arquivo).exists() for arquivo in arquivos_dados)
        
        if not tem_dados:
            print("üìù Nenhum dado local encontrado para migrar")
            print("üí° Isso √© normal se for a primeira instala√ß√£o")
            
            gerar_teste = input("\nüß™ Gerar dados de teste? (s/n): ").lower() == 's'
            if gerar_teste:
                print("\nüîÑ Executando migra√ß√£o com dados de teste...")
                try:
                    import subprocess
                    result = subprocess.run(['python', 'migracao_supabase.py'], 
                                          input='2\n', text=True, capture_output=True)
                    if result.returncode == 0:
                        print("‚úÖ Dados de teste criados com sucesso!")
                    else:
                        print(f"‚ùå Erro ao criar dados de teste: {result.stderr}")
                except Exception as e:
                    print(f"‚ùå Erro: {e}")
        else:
            print("üìÅ Dados locais encontrados:")
            for arquivo in arquivos_dados:
                if Path(arquivo).exists():
                    size = Path(arquivo).stat().st_size
                    print(f"   ‚úÖ {arquivo} ({size:,} bytes)")
            
            migrar = input("\nüîÑ Migrar dados locais para Supabase? (s/n): ").lower() == 's'
            if migrar:
                print("\nüîÑ Executando migra√ß√£o...")
                try:
                    import subprocess
                    result = subprocess.run(['python', 'migracao_supabase.py'], 
                                          input='1\n', text=True, capture_output=True)
                    if result.returncode == 0:
                        print("‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
                        print("üìä Verifique o relat√≥rio de migra√ß√£o")
                    else:
                        print(f"‚ùå Erro na migra√ß√£o: {result.stderr}")
                except Exception as e:
                    print(f"‚ùå Erro: {e}")
    
    def finalizar_configuracao(self):
        """Finaliza configura√ß√£o"""
        print("\nüéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("=" * 40)
        print()
        print("‚úÖ RESUMO DO QUE FOI CONFIGURADO:")
        print(f"   üìç Projeto Supabase: {self.projeto_url}")
        print(f"   üóÑÔ∏è Banco de dados criado com 10 tabelas")
        print(f"   üîê Arquivo .env configurado")
        print(f"   üîÑ Dados migrados/teste criados")
        print()
        print("üöÄ PR√ìXIMOS PASSOS:")
        print("   1. Execute: python admin_backend.py")
        print("   2. Acesse: http://localhost:8000")
        print("   3. Login: admin@sistema.local / admin123")
        print("   4. Comece a usar o sistema!")
        print()
        print("üìö DOCUMENTA√á√ÉO:")
        print("   ‚Ä¢ README_SUPABASE.md - Documenta√ß√£o completa")
        print("   ‚Ä¢ supabase_config.py - Exemplos de uso")
        print("   ‚Ä¢ migracao_supabase.py - Migra√ß√£o de dados")
        print()
        print("üéØ SEU SISTEMA AGORA √â UM SAAS PROFISSIONAL!")
    
    async def executar_configuracao_completa(self):
        """Executa configura√ß√£o completa"""
        self.mostrar_banner()
        
        try:
            # Passo 1: Criar conta
            self.passo_1_criar_conta()
            
            # Passo 2: Obter chaves
            self.passo_2_obter_chaves()
            
            # Passo 3: Testar conex√£o
            if not self.passo_3_testar_conexao():
                print("‚ùå Configura√ß√£o interrompida devido a erro de conex√£o")
                return
            
            # Passo 4: Criar .env
            self.passo_4_criar_env()
            
            # Passo 5: Executar SQL
            if not self.passo_5_executar_sql():
                print("‚ùå Configura√ß√£o interrompida")
                return
            
            # Passo 6: Verificar tabelas
            if not self.passo_6_verificar_tabelas():
                print("‚ö†Ô∏è Continue mesmo com problemas nas tabelas")
            
            # Passo 7: Migrar dados
            self.passo_7_migrar_dados()
            
            # Finalizar
            self.finalizar_configuracao()
        
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è Configura√ß√£o cancelada pelo usu√°rio")
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {e}")

def main():
    """Fun√ß√£o principal"""
    configurador = ConfiguradorSupabase()
    asyncio.run(configurador.executar_configuracao_completa())

if __name__ == "__main__":
    main() 