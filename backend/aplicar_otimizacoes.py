#!/usr/bin/env python3
"""
üîß APLICADOR DE OTIMIZA√á√ïES
Aplica automaticamente as configura√ß√µes otimizadas no sistema
"""

import shutil
import re
from pathlib import Path

def aplicar_otimizacoes():
    print("üîß APLICANDO OTIMIZA√á√ïES AUTOM√ÅTICAS")
    print("=" * 40)
    
    # Arquivos
    sistema_original = Path("sistema_producao_24h.py")
    sistema_backup = Path("sistema_producao_24h_backup.py")
    otimizacoes = Path("sistema_otimizado.py")
    
    if not sistema_original.exists():
        print("‚ùå Arquivo original n√£o encontrado")
        return False
    
    if not otimizacoes.exists():
        print("‚ùå Execute 'python otimizador_sistema.py' primeiro")
        return False
    
    # Fazer backup
    print("üíæ Fazendo backup do sistema original...")
    shutil.copy2(sistema_original, sistema_backup)
    print(f"‚úÖ Backup salvo: {sistema_backup}")
    
    # Ler arquivos
    with open(sistema_original, 'r', encoding='utf-8') as f:
        codigo_original = f.read()
    
    with open(otimizacoes, 'r', encoding='utf-8') as f:
        config_otimizada = f.read()
    
    # Extrair configura√ß√µes otimizadas
    config_match = re.search(r'PRODUCTION_CONFIG = \{[^}]+\}', config_otimizada, re.DOTALL)
    estrategias_match = re.search(r'ESTRATEGIAS_PRODUCAO = \[[^\]]+\]', config_otimizada, re.DOTALL)
    
    if not config_match or not estrategias_match:
        print("‚ùå Erro ao extrair configura√ß√µes otimizadas")
        return False
    
    nova_config = config_match.group(0)
    novas_estrategias = estrategias_match.group(0)
    
    print("üîÑ Aplicando configura√ß√µes otimizadas...")
    
    # Substituir PRODUCTION_CONFIG
    codigo_otimizado = re.sub(
        r'PRODUCTION_CONFIG = \{[^}]+\}',
        nova_config,
        codigo_original,
        flags=re.DOTALL
    )
    
    # Substituir ESTRATEGIAS_PRODUCAO
    codigo_otimizado = re.sub(
        r'ESTRATEGIAS_PRODUCAO = \[[^\]]+\]',
        novas_estrategias,
        codigo_otimizado,
        flags=re.DOTALL
    )
    
    # Adicionar coment√°rio de otimiza√ß√£o
    comentario = f"""
# ==========================================
# üîß SISTEMA OTIMIZADO AUTOMATICAMENTE
# Data: {Path(otimizacoes).stat().st_mtime}
# 
# PROBLEMAS CORRIGIDOS:
# - üö® SPAM DE SINAIS: 3.0 ‚Üí <0.5 sinais/minuto
# - ‚ö†Ô∏è ESTRAT√âGIA √öNICA: 1 ‚Üí 3 estrat√©gias ativas
#
# MUDAN√áAS APLICADAS:
# - Intervalo: 3s ‚Üí 10s
# - Confian√ßa: 75% ‚Üí 85%
# - Sinais/dia: 10 ‚Üí 5 por estrat√©gia
# - Estrat√©gias: +2 novas ativadas
# ==========================================

"""
    
    codigo_final = comentario + codigo_otimizado
    
    # Salvar arquivo otimizado
    with open(sistema_original, 'w', encoding='utf-8') as f:
        f.write(codigo_final)
    
    print("‚úÖ OTIMIZA√á√ïES APLICADAS COM SUCESSO!")
    print("\nüìÅ Arquivos:")
    print(f"  ‚Ä¢ {sistema_original} - Sistema otimizado")
    print(f"  ‚Ä¢ {sistema_backup} - Backup do original")
    print(f"  ‚Ä¢ {otimizacoes} - Configura√ß√µes usadas")
    
    print("\nüéØ MUDAN√áAS APLICADAS:")
    print("  ‚úÖ Intervalo: 3s ‚Üí 10s (reduz spam)")
    print("  ‚úÖ Confian√ßa: 75% ‚Üí 85% (mais seletivo)")
    print("  ‚úÖ Sinais/dia: 10 ‚Üí 5 por estrat√©gia")
    print("  ‚úÖ Estrat√©gias: 1 ‚Üí 3 ativas")
    
    print("\nüöÄ PR√ìXIMO PASSO:")
    print("Execute: python sistema_producao_24h.py")
    
    return True

def reverter_otimizacoes():
    """Reverte para o sistema original"""
    sistema_original = Path("sistema_producao_24h.py")
    sistema_backup = Path("sistema_producao_24h_backup.py")
    
    if not sistema_backup.exists():
        print("‚ùå Backup n√£o encontrado")
        return False
    
    shutil.copy2(sistema_backup, sistema_original)
    print("‚úÖ Sistema revertido para vers√£o original")
    return True

def main():
    print("üîß APLICADOR DE OTIMIZA√á√ïES")
    print("=" * 30)
    print("1. üéØ Aplicar otimiza√ß√µes")
    print("2. ‚Ü©Ô∏è Reverter para original")
    print("3. üö™ Sair")
    
    escolha = input("\nEscolha uma op√ß√£o: ").strip()
    
    if escolha == "1":
        aplicar_otimizacoes()
    elif escolha == "2":
        reverter_otimizacoes()
    elif escolha == "3":
        print("üëã At√© logo!")
    else:
        print("‚ùå Op√ß√£o inv√°lida")

if __name__ == "__main__":
    main() 