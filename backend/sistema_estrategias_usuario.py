#!/usr/bin/env python3
"""
üéØ SISTEMA DE SINAIS COM ESTRAT√âGIAS PERSONALIZ√ÅVEIS DO USU√ÅRIO
Vers√£o que carrega estrat√©gias do arquivo CSV definido pelo usu√°rio
Compatible com ScriptSolo.py original
"""

import time
import requests
import json
import csv
from datetime import datetime
from typing import List, Dict, Any
from pathlib import Path

# === CONFIGURA√á√ïES ===
BOT_TOKEN = "8106969377:AAHp4PRKZN-RHb1GxR3C3l7PzikFHEcRsck"
CHAT_ID = "-1002852101467"
BLAZE_API_URL = "https://blaze.bet.br/api/singleplayer-originals/originals/roulette_games/recent/1"
TELEGRAM_API_BASE = f"https://api.telegram.org/bot{BOT_TOKEN}"

# Configura√ß√µes do sistema
CONFIG = {
    "protection": True,
    "max_gales": 2,
    "interval_seconds": 5,
    "estrategias_file": "estrategias_usuario.csv",
    "enable_alerts": True
}

# Estado do sistema
class SystemState:
    def __init__(self):
        self.ativo = True
        self.ultimo_resultado = None
        self.historico_resultados = []
        self.gales_ativos = {}
        self.analisar = True
        
        # Estat√≠sticas
        self.stats = {
            "sinais_enviados": 0,
            "wins": 0,
            "losses": 0,
            "brancos": 0,
            "estrategias_testadas": 0
        }

state = SystemState()

def log(message, level="INFO"):
    """Log simples"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def convert_number_to_color(number: int) -> str:
    """Converte n√∫mero para cor (igual ao ScriptSolo.py)"""
    if 1 <= number <= 7:
        return "V"  # Vermelho
    elif 8 <= number <= 14:
        return "P"  # Preto
    else:
        return "B"  # Branco

def carregar_estrategias_csv() -> List[Dict]:
    """
    Carrega estrat√©gias do arquivo CSV (formato ScriptSolo.py)
    Cada linha: "condicao1-condicao2-...=aposta"
    """
    estrategias_file = Path(CONFIG["estrategias_file"])
    
    if not estrategias_file.exists():
        log(f"‚ùå Arquivo de estrat√©gias n√£o encontrado: {estrategias_file}", "ERROR")
        return []
    
    estrategias = []
    
    try:
        with open(estrategias_file, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            
            for i, row in enumerate(reader):
                if not row or not row[0].strip():
                    continue
                
                estrategia_str = row[0].strip()
                
                # Parser da estrat√©gia
                if "=" not in estrategia_str:
                    log(f"‚ö†Ô∏è Linha {i+1}: Formato inv√°lido '{estrategia_str}'", "WARNING")
                    continue
                
                try:
                    condicoes_str, aposta_str = estrategia_str.split("=", 1)
                    condicoes = [c.strip() for c in condicoes_str.split("-")]
                    aposta = aposta_str.strip()
                    
                    # Validar
                    if aposta not in ["V", "P", "B"]:
                        log(f"‚ö†Ô∏è Linha {i+1}: Aposta inv√°lida '{aposta}'", "WARNING")
                        continue
                    
                    estrategias.append({
                        "id": i + 1,
                        "conditions": condicoes,
                        "bet_direction": aposta,
                        "original": estrategia_str,
                        "active": True
                    })
                    
                except Exception as e:
                    log(f"‚ùå Erro na linha {i+1} '{estrategia_str}': {e}", "ERROR")
        
        log(f"‚úÖ Carregadas {len(estrategias)} estrat√©gias do arquivo CSV")
        return estrategias
        
    except Exception as e:
        log(f"‚ùå Erro ao carregar estrat√©gias: {e}", "ERROR")
        return []

def fetch_blaze_results() -> List[int]:
    """Busca resultados da Blaze"""
    try:
        response = requests.get(BLAZE_API_URL, timeout=10)
        if response.status_code == 200:
            data = response.json()
            return [item['roll'] for item in data]
        return []
    except Exception as e:
        log(f"Erro ao buscar Blaze: {e}", "ERROR")
        return []

def send_telegram_message(message: str) -> bool:
    """Envia mensagem para o Telegram"""
    try:
        response = requests.post(
            f"{TELEGRAM_API_BASE}/sendMessage",
            json={
                "chat_id": CHAT_ID,
                "text": message,
                "parse_mode": "Markdown"
            },
            timeout=10
        )
        return response.status_code == 200
    except Exception as e:
        log(f"Erro ao enviar Telegram: {e}", "ERROR")
        return False

def verificar_estrategia(estrategia: Dict, results: List[int]) -> bool:
    """
    Verifica se uma estrat√©gia faz match com os resultados
    L√ìGICA ID√äNTICA AO ScriptSolo.py original
    """
    conditions = estrategia["conditions"]
    
    # Verificar se temos dados suficientes
    if len(conditions) > len(results):
        return False
    
    # Converter n√∫meros para cores
    colors = [convert_number_to_color(num) for num in results]
    
    log(f"Testando estrat√©gia: {estrategia['original']}", "DEBUG")
    log(f"N√∫meros: {results[:len(conditions)]}", "DEBUG")
    log(f"Cores: {colors[:len(conditions)]}", "DEBUG")
    
    # L√ìGICA CORRIGIDA FINAL (igual ao ScriptSolo.py):
    # A primeira condi√ß√£o corresponde ao resultado mais antigo
    # A √∫ltima condi√ß√£o corresponde ao resultado mais recente
    
    for i, condition in enumerate(conditions):
        # A condi√ß√£o i corresponde √† posi√ß√£o (len(conditions)-1-i) no hist√≥rico
        posicao_historico = len(conditions) - 1 - i
        
        numero_nesta_posicao = str(results[posicao_historico])
        cor_nesta_posicao = colors[posicao_historico]
        
        log(f"  Condi√ß√£o {i+1}: '{condition}' | Posi√ß√£o {posicao_historico} | N√∫mero: {numero_nesta_posicao} | Cor: {cor_nesta_posicao}", "DEBUG")
        
        # Verificar se a condi√ß√£o √© atendida
        if condition == "X":  # Wildcard
            log(f"    ‚úì Wildcard aceito", "DEBUG")
            continue
        elif condition == numero_nesta_posicao:  # Match por n√∫mero
            log(f"    ‚úì N√∫mero match: {condition} == {numero_nesta_posicao}", "DEBUG")
            continue
        elif condition == cor_nesta_posicao:  # Match por cor
            log(f"    ‚úì Cor match: {condition} == {cor_nesta_posicao}", "DEBUG")
            continue
        else:
            log(f"    ‚ùå Sem match: {condition} != {numero_nesta_posicao} e != {cor_nesta_posicao}", "DEBUG")
            return False
    
    return True

def verificar_alerta(estrategia: Dict, results: List[int]) -> bool:
    """
    Verifica se deve emitir alerta (condi√ß√µes parciais)
    Remove a √∫ltima condi√ß√£o e verifica match
    """
    conditions = estrategia["conditions"]
    
    # Precisa ter pelo menos 2 condi√ß√µes para alerta
    if len(conditions) <= 1:
        return False
    
    # Verificar alerta (condi√ß√µes parciais - remover √∫ltima condi√ß√£o)
    conditions_alert = conditions[:-1]
    
    # Criar estrat√©gia tempor√°ria para alerta
    estrategia_alerta = {
        "conditions": conditions_alert,
        "original": " ‚Üí ".join(conditions_alert) + " (ALERTA)"
    }
    
    return verificar_estrategia(estrategia_alerta, results)

def get_color_emoji(color: str) -> str:
    """Converte cor para emoji"""
    mapping = {"V": "üî¥", "P": "‚ö´", "B": "‚ö™"}
    return mapping.get(color, "‚ùì")

def get_color_name(color: str) -> str:
    """Converte cor para nome"""
    mapping = {"V": "VERMELHO", "P": "PRETO", "B": "BRANCO"}
    return mapping.get(color, "DESCONHECIDO")

def send_signal(estrategia: Dict, results: List[int]):
    """Envia sinal baseado na estrat√©gia do usu√°rio"""
    bet_direction = estrategia["bet_direction"]
    color_emoji = get_color_emoji(bet_direction)
    color_name = get_color_name(bet_direction)
    
    signal_message = f"""üéØ **SINAL DETECTADO** üî•

üìã **Estrat√©gia**: {estrategia['original']}
üé∞ **Apostar em**: {color_emoji} **{color_name}**
üí∞ **Prote√ß√£o**: ‚ö™ **BRANCO**
‚ôªÔ∏è **Gales**: At√© {CONFIG['max_gales']}

üìä **An√°lise**:
‚Ä¢ √öltimos: {results[:5]}
‚Ä¢ Cores: {' '.join([get_color_emoji(convert_number_to_color(r)) for r in results[:5]])}

‚è∞ **{datetime.now().strftime('%H:%M:%S')}**

üçÄ **BOA SORTE!** üöÄ"""

    if send_telegram_message(signal_message):
        state.stats["sinais_enviados"] += 1
        log(f"‚úÖ SINAL ENVIADO: {estrategia['original']} -> {color_name}")
    else:
        log(f"‚ùå Falha ao enviar sinal: {estrategia['original']}")

def send_alert(estrategia: Dict):
    """Envia alerta de estrat√©gia pr√≥xima"""
    alert_message = f"""‚ö†Ô∏è **FIQUE ATENTO!** ‚ö†Ô∏è

üìã **Estrat√©gia**: {estrategia['original']}
üéØ **Pr√≥ximo resultado pode ativar sinal**

‚è∞ **{datetime.now().strftime('%H:%M:%S')}**"""

    if send_telegram_message(alert_message):
        log(f"‚ö†Ô∏è ALERTA ENVIADO: {estrategia['original']}")

def processar_estrategias_usuario(results: List[int], estrategias: List[Dict]):
    """
    Processa estrat√©gias definidas pelo usu√°rio
    L√ìGICA IGUAL AO ScriptSolo.py original
    """
    if len(results) < 2:
        return
    
    log(f"Processando {len(estrategias)} estrat√©gias do usu√°rio...")
    
    state.stats["estrategias_testadas"] = len(estrategias)
    
    # Verificar cada estrat√©gia
    for estrategia in estrategias:
        if not estrategia.get("active", True):
            continue
        
        # Verificar sinal completo
        if verificar_estrategia(estrategia, results):
            log(f"üéØ MATCH ENCONTRADO! Estrat√©gia: {estrategia['original']}")
            send_signal(estrategia, results)
            return  # Parar ap√≥s primeiro match (igual ao original)
        
        # Verificar alerta
        if CONFIG["enable_alerts"] and verificar_alerta(estrategia, results):
            log(f"‚ö†Ô∏è ALERTA: {estrategia['original']}")
            send_alert(estrategia)
            return  # Parar ap√≥s primeiro alerta

def mostrar_estatisticas():
    """Mostra estat√≠sticas atuais"""
    stats_message = f"""üìä **ESTAT√çSTICAS DO SISTEMA**

üéØ **Sinais enviados**: {state.stats['sinais_enviados']}
‚úÖ **Wins**: {state.stats['wins']}
‚ùå **Losses**: {state.stats['losses']}
‚ö™ **Brancos**: {state.stats['brancos']}
üìã **Estrat√©gias testadas**: {state.stats['estrategias_testadas']}

‚è∞ **{datetime.now().strftime('%H:%M:%S')}**"""

    send_telegram_message(stats_message)
    print(stats_message)

def monitor_blaze():
    """Monitor principal da Blaze"""
    log("üöÄ Iniciando sistema com estrat√©gias personaliz√°veis do usu√°rio...")
    
    # Carregar estrat√©gias do usu√°rio
    estrategias = carregar_estrategias_csv()
    
    if not estrategias:
        log("‚ùå Nenhuma estrat√©gia v√°lida encontrada. Sistema n√£o pode continuar.", "ERROR")
        return
    
    log(f"üìã Estrat√©gias carregadas:")
    for estrategia in estrategias:
        status = "‚úÖ" if estrategia["active"] else "‚ùå"
        log(f"  {status} {estrategia['original']}")
    
    # Mensagem de in√≠cio
    start_message = f"""üéØ **SISTEMA ATIVADO COM ESTRAT√âGIAS PERSONALIZ√ÅVEIS**

üìÅ **Arquivo**: {CONFIG['estrategias_file']}
üìã **Estrat√©gias carregadas**: {len(estrategias)}
‚è∞ **In√≠cio**: {datetime.now().strftime('%H:%M:%S')}
‚ö° **Intervalo**: {CONFIG['interval_seconds']}s

üöÄ **Aguardando sinais das suas estrat√©gias...**"""
    
    send_telegram_message(start_message)
    
    while state.ativo:
        try:
            # Buscar novos resultados
            results = fetch_blaze_results()
            
            if results and results[0] != state.ultimo_resultado:
                state.ultimo_resultado = results[0]
                state.historico_resultados = results
                
                log(f"Novo resultado: {state.ultimo_resultado} ({get_color_emoji(convert_number_to_color(state.ultimo_resultado))})")
                
                # Processar estrat√©gias do usu√°rio
                processar_estrategias_usuario(results, estrategias)
            
            time.sleep(CONFIG["interval_seconds"])
            
        except KeyboardInterrupt:
            log("Sistema interrompido pelo usu√°rio")
            state.ativo = False
        except Exception as e:
            log(f"Erro no monitor: {e}", "ERROR")
            time.sleep(10)

def main():
    """Fun√ß√£o principal"""
    print("=" * 60)
    print("üéØ SISTEMA DE SINAIS COM ESTRAT√âGIAS PERSONALIZ√ÅVEIS")
    print("=" * 60)
    print(f"üìÅ Arquivo de estrat√©gias: {CONFIG['estrategias_file']}")
    print(f"üí¨ Canal: {CHAT_ID}")
    print(f"‚ö° Intervalo: {CONFIG['interval_seconds']}s")
    print("=" * 60)
    print("\nComandos:")
    print("  'stats' - Enviar estat√≠sticas")
    print("  'quit'  - Parar sistema")
    print("\nüöÄ Iniciando em 3 segundos...")
    
    time.sleep(3)
    
    try:
        monitor_blaze()
    except KeyboardInterrupt:
        log("Sistema finalizado")
    finally:
        mostrar_estatisticas()
        
        end_message = f"""üõë **SISTEMA FINALIZADO**

üìä **Resumo da sess√£o**:
‚Ä¢ Sinais enviados: {state.stats['sinais_enviados']}
‚Ä¢ Estrat√©gias testadas: {state.stats['estrategias_testadas']}

‚è∞ **Finalizado**: {datetime.now().strftime('%H:%M:%S')}"""
        
        send_telegram_message(end_message)
        print("\n‚úÖ Sistema finalizado com sucesso!")

if __name__ == "__main__":
    main() 